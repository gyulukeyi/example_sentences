\NeedsTeXFormat{LaTeX2e}
%
\ProvidesPackage{example_sentences}%
  [2017/08/22 Linguistic example sentences v.0.5.0]
%
% Package Option: normalitem
% Use \usepackage[normalitem]{example_sentences} to leave the original \item
% command unchanged. You can then use \exitem instead for advanced behavior
% that item otherwise gets, or the short version \ex (see below).
\newif\if@ExSen@changeitem\@ExSen@changeitemtrue
\DeclareOption{normalitem}{\@ExSen@changeitemfalse}
%
% Package Option: noexref
% Prevents the \exref convenience command from being defined.
\newif\if@ExSen@define@exref\@ExSen@define@exreftrue
\DeclareOption{noexref}{\@ExSen@define@exreffalse}
%
% Package Option: noex
% Prevents the \ex command (for references) from being defined
\newif\if@ExSen@define@ex\@ExSen@define@extrue
\DeclareOption{noex}{\@ExSen@defineexfalse}
%
% Package Option: noexitem
% Prevents the \exitem command from being defined.
\newif\if@ExSen@define@exitem\@ExSen@define@exitemtrue
\DeclareOption{noexitem}{\@ExSen@define@exitemfalse}
%
%
% Package Option: compat
% Implies all of the above, and also prevents processing at an earlier stage
\newif\if@ExSen@compat\@ExSen@compatfalse
\DeclareOption{compat}{\@ExSen@compattrue}
%
% Package Option: shortform
% Use \usepackage[shortform]{example_sentences} defines short names for the
% environment "exe" and the item command \ex for \(ex)item.  So the following
% is valid:
%    \begin{exe}
%       \ex(weird)<?> This example is weird.
%       \ex(not-weird) This is example is not as weird as \exref{weird}.
%    \end{exe}
% Short forms are simply additional synonyms, so they can be freely intermixed
% with the long form commands.
\newif\if@ExSen@shortform\@ExSen@shortformfalse
\DeclareOption{shortform}{\@ExSen@shortformtrue}
%
% Package Option: enumitemize
% Standardly, example_sentences does not apply enumitem's enhancements to 
% the standard lists. This option changes that.
\DeclareOption{enumitemize}{%
    \PassOptionsToPackage{loadonly}{enumitem}%
}%
%
% All remaining options are passed on to the enumitem package. Note that this
% you can pass [loadonly] to example_sentences to ensure that the usual environments
% (itemize, enumerate and description) are not enhanced by enumitem (the
% default).
%
\DeclareOption*{\PassOptionsToPackage{\CurrentOption}{enumitem}}
%
\ProcessOptions\relax
% 
% LOADING DEPENDENCIES
% 
% example_sentences is actually just a thin wrapper around the enumitem package
% (plus some convenience commands)
\RequirePackage{enumitem}
%
% SETTING UP INTERNAL COMMANDS
%
% These commands are used in the list definitions. They are modified
% later, as needed.
\newcommand{\ExSen@beforelist}{}
\newcommand{\ExSen@afterlist}{}
%
% SETTING UP THE LISTS
%
% Define example lists as a clone fo enumerate. 
\newlist{examples}{enumerate}{3}
%
% CONFIGURING THE LISTS
% 
% We define the defaults as keys, then immediately apply them. This is to make
% it easier to overwrite specific settings. Since footnote examples share 
% spacing defaults with the in-text examples, we define spacing defaults for
% each level separately.
% All lists:
\SetEnumitemKey{exdefaults}{%
    align=left,%
    parsep=0pt,%
    topsep=0pt,%
    partopsep=0pt,%
}
\setlist[examples]{exdefaults}
% for consistency ...
%
\SetEnumitemKey{ex1spacingdefaults}{%
  % Horizontal Spacing -- defaults should play well with label up to four
  % digits long, plus parens
  labelindent=0pt,%
  leftmargin=2\parindent,%
  labelsep=*,%
  itemindent=0pt,%
  labelwidth=*,%
  % vertical spacing
  itemsep=0.5\baselineskip,%
  topsep=0.75\baselineskip,
  before=\ExSen@beforelist,
  after=\ExSen@afterlist,%
}
%
\SetEnumitemKey{ex1defaults}{
  ex1spacingdefaults,%
  label={(\arabic*)},%
  ref={\arabic{examplesi}},
  resume=examples,%
}
\setlist[examples,1]{ex1defaults}
%
\SetEnumitemKey{ex2spacingdefaults}{%
  % Horizontal spacing
  labelindent=0pt,%
  leftmargin=1.25\parindent,%
  labelsep=*,%
  itemindent=0pt,%
  labelwidth=*,%
  % Vertical spacing
  topsep=0.25\baselineskip%
}
\SetEnumitemKey{ex2defaults}{%
  ex2spacingdefaults,%
  label={\alph*.},%
  ref={\arabic{examplesi}\alph{examplesii}},%
}
\setlist[examples,2]{ex2defaults}
%
\SetEnumitemKey{ex3spacingdefaults}{%
  labelindent=0pt,%
  leftmargin=1\parindent,%
  labelsep=*,%
  itemindent=0pt,%
  labelwidth=*,%
  % Vertical spacing
  topsep=0.25\baselineskip%
}
\SetEnumitemKey{ex3defaults}{%
  ex3spacingdefaults,%
  label={(\roman*)},%
  ref={\arabic{examplesi}\alph{examplesii}\roman{examplesiii}},%
}
\setlist[examples,3]{ex3defaults}

%
% FOOTNOTE HANDLING
%
% Define a separate list for use in footnotes, as this is the cleanest way
% to handle those.
\newlist{fnexamples}{enumerate}{3}
\SetEnumitemKey{fnexdefaults}{%
    exdefaults,%
}
\setlist[fnexamples]{fnexdefaults}
%
\SetEnumitemKey{fnex1defaults}{
  ex1spacingdefaults,%
  label={(\roman*)},%
  ref={(\roman{fnexamplesi})},%
  resume,%
}
\setlist[fnexamples,1]{fnex1defaults}
%
\SetEnumitemKey{fnex2defaults}{%
  ex2spacingdefaults,%
  label={\alph*.},%
  ref={\arabic{examplesi}\alph{examplesii}},%
}
\setlist[fnexamples,2]{fnex2defaults}
%
\SetEnumitemKey{fnex3defaults}{%
  ex3spacingdefaults,%
  label={(\roman*)},%
  ref={\roman{fnexamplesi}\alph{fnexamplesii}\roman{fnexamplesiii}},%
}
\setlist[fnexamples,3]{fnex3defaults}
%
% \footnotizeexamples has to be called before the first
% example in a footnote, \unfootnotizeexamples after the
% last.
\newcommand{\footnotizeexamples}{%
  \let\textexamples\examples
  \let\endtextexamples\endexamples
  \let\examples\fnexamples
  \let\endexamples\endfnexamples
  \restartlist{fnexamples}
}
\newcommand{\unfootnotizeexamples}{%
  \let\examples\textexamples
  \let\endexamples\endtextexamples
}
% We patch the footnote command of the standard LaTeX packages.
% Borrowed from linguex.sty --- this is a dirty hack, I dislike it.
% Also, it will not work with various other packages.
\let\ExSen@footnotetext=\@footnotetext
\long\def\@footnotetext#1{%
  \footnotizeexamples%
  \ExSen@footnotetext{#1}%
  \unfootnotizeexamples%
}
%
% \diacritic{}: Typsets a grammaticallity/acceptability judgment in the space
% between example number and sentence. This command is used internally in
% the \(ex)item commands, but maybe useful for the user in environments where
% xparse is not available.
% The definition of this command is borrowed from Alexander Holt's example.sty
\newcommand{\diacritic}[1]{\leavevmode \llap{#1\kern 0.15 em}\ignorespaces}
%
% For the sticklers: Alias `examples` environment as `example`
\let\example\examples
\let\endexample\endexamples
%
% We expose the shortform commands early, in case [compat] aborts 
% processing.
\if@ExSen@shortform
    % Alias the example environment as `exe`
    \let\exe\examples
    \let\endexe\endexamples
     % Define \ex to be \item within example lists ...
     \g@addto@macro\ExSen@beforelist{\let\ex\item}
     % ... but it retains its reference meaning outside (if not disabled).
     \if@ExSen@define@ex
        \g@addto@macro\ExSen@afterlist{\def\ex\ExSen@exref}
    \fi
\fi
% In compat mode, we abort here, before any of the convenience commands
% are defined.
\if@ExSen@compat
    \endinput
\fi
%
% CONVENIENCE COMAND DEFINITIONS
% We first define internal versions of all commands (prefixed with ExSen@),
% and expose them later, based on the package options. In the inline comments, 
% we refer to the exposed command names.
%
% \exref command (standardly aliased as \ex), for convenient reference to 
% examples.
\newcommand{\ExSen@exref}[2][]{(\ref{#2}#1)}
%
%
% A flexible item command for examples. Can be used in the following ways
%  - \exitem Standard use without argument.
%  - \exitem[(4)] Optional argument in square brackets supplies a manual number (or other item).
%  - \exitem(foo) Optional argument in round brackets is a convenient way to assign labels. Equivalent to \exitem\label{foo}
%  - \exitem{foo} Optional argument in curly braces is an easy way to do crossreferences (e.g. for repeated examples). Equivalent to \exitem[\ref{foo}].
%  All the above versions allow an optional argument in angle brackets, for acceptability judgements which are typeset in the space between example number/letter and example text:
%  - \exitem<*> \exitem[(4)]<**> \exitem(foo)<\#> \exitem{foo}<??\%> all work as expected.
\newif\if@xparse\@xparsefalse
\IfFileExists{xparse.sty}{%
    \@xparsetrue%
}{%
    \@xparsefalse%
}%
\if@xparse
    \RequirePackage{xparse}
    % We make a copy of latex \item command at the time that this package is
    % loaded. This way, nothing odd will happen in case a later package changes
    % the behavior of \item
    \let\ExSen@item\item
    \NewDocumentCommand{\ExSen@exitem}{o d() g d<>}{%
        \IfValueTF{#1}{%
            \ExSen@item[#1]%
        }{%
            \IfValueTF{#2}{%
                \ExSen@item \label{#2}%
            }{%
                \IfValueTF{#3}{%
                    \ExSen@item[\ExSen@exref{#3}]%
                }{
                    \ExSen@item%
                }
            }%
        }%
        \IfValueT{#4}{%
            \diacritic{#4}
        }%
    }
    % If xparse is available, we also enable a version of 
    % \ex(ref) that takes its optional argument last, as 
    % this is often more inuitive
    \let\ExSen@oldexref\ExSen@exref
    \RenewDocumentCommand{\ExSen@exref}{o m o}{%
        \IfValueTF{#1}{\ExSen@oldexref[#1]{#2}}{%
          \IfValueTF{#3}{\ExSen@oldexref[#3]{#2}}{\ExSen@oldexref{#2}}%
        }%
    }
\fi
%
% EXPOSING THE CONVENIENCE API COMMANDS
%
\if@ExSen@define@exitem
    \let\exitem\ExSen@item
\fi
\if@ExSen@define@exref
    \let\exref\ExSen@exref
\fi
\if@ExSen@define@ex
    \let\ex\ExSen@exref
\fi
\if@ExSen@changeitem
   % \g@addto@macro is known to the practitioners of the dark arts (TeX)
   % as an invocation that globally (\g) appends (@addto) something
   % to a macro.
   % I'd like to avoid using such primitives here, but doing so would
   % require adding a dependency (such as etoolbox.sty), which seems
   % excessive.
   \g@addto@macro\ExSen@beforelist{%
        % Save the CURRENT implementation of \item, in order to restore it.
        % Note that \item may be different from \ExSen@item at this point,
        % if a package loaded after example_sentences changed \item.
        \let\ExSen@latexitem\item%
        \let\item\ExSen@exitem%
    }
    \g@addto@macro\ExSen@afterlist{\let\item\ExSen@latexitem}
\fi
\if@ExSen@shortform
    % If we got to this point, we actually want \ex to \exitem, rather than
    % \item ...
    \g@addto@macro\ExSen@beforelist{\let\ex\ExSen@exitem}
    % ... but it retains its reference meaning outside (if not disabled).
    \if@ExSen@define@ex
        \g@addto@macro\ExSen@afterlist{\let\ex\ExSen@exref}
    \fi
\fi
    